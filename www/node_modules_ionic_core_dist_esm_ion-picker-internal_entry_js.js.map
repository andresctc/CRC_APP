{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AAC6G;AACjD;AAC5D;AACA,oCAAoC,oBAAoB,aAAa,kBAAkB,sBAAsB,mBAAmB,qBAAqB,uBAAuB,WAAW,aAAa,cAAc,UAAU,yCAAyC,kBAAkB,WAAW,UAAU,oBAAoB,qBAAqB,OAAO,MAAM,YAAY,yBAAyB,WAAW,YAAY,QAAQ,oBAAoB,OAAO,UAAU,YAAY,yBAAyB,WAAW,YAAY,QAAQ,wBAAwB,kBAAkB,OAAO,QAAQ,QAAQ,SAAS,iBAAiB,kBAAkB,aAAa,gBAAgB,kBAAkB,wBAAwB,YAAY,mCAAmC,2BAA2B,WAAW,+FAA+F,wBAAwB,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,YAAY,kBAAkB,MAAM,OAAO,QAAQ,SAAS,WAAW,YAAY,SAAS,UAAU,SAAS,UAAU,mBAAmB,UAAU,gBAAgB,wBAAwB,qBAAqB,0DAA0D,iBAAiB,yDAAyD,eAAe,qBAAqB,wNAAwN,uLAAuL,oBAAoB,wNAAwN,oLAAoL,wBAAwB,8CAA8C;AACvwE;AACA,mCAAmC,oBAAoB,aAAa,kBAAkB,sBAAsB,mBAAmB,qBAAqB,uBAAuB,WAAW,aAAa,cAAc,UAAU,yCAAyC,kBAAkB,WAAW,UAAU,oBAAoB,qBAAqB,OAAO,MAAM,YAAY,yBAAyB,WAAW,YAAY,QAAQ,oBAAoB,OAAO,UAAU,YAAY,yBAAyB,WAAW,YAAY,QAAQ,wBAAwB,kBAAkB,OAAO,QAAQ,QAAQ,SAAS,iBAAiB,kBAAkB,aAAa,gBAAgB,kBAAkB,wBAAwB,YAAY,mCAAmC,2BAA2B,WAAW,+FAA+F,wBAAwB,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,YAAY,kBAAkB,MAAM,OAAO,QAAQ,SAAS,WAAW,YAAY,SAAS,UAAU,SAAS,UAAU,mBAAmB,UAAU,gBAAgB,wBAAwB,qBAAqB,0DAA0D,iBAAiB,yDAAyD,eAAe,qBAAqB,mOAAmO,oLAAoL,oBAAoB,mOAAmO,iLAAiL;AAChtE;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,8BAA8B,qDAAW;AACzC;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sDAAsD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAyC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI,uDAAc;AAClB,IAAI,uDAAc;AAClB;AACA;AACA,YAAY,qDAAC,CAAC,iDAAI,IAAI,8EAA8E,EAAE,qDAAC,YAAY,sLAAsL,GAAG,qDAAC,UAAU,wBAAwB,GAAG,qDAAC,UAAU,uBAAuB,GAAG,qDAAC,UAAU,iEAAiE,GAAG,qDAAC;AACvc;AACA,aAAa,OAAO,qDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACiD","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-internal.entry.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-b3eecb14.js';\r\nimport { g as getElementRoot } from './helpers-1ec1a6dd.js';\r\n\r\nconst pickerInternalIosCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-highlight{background:var(--ion-color-step-150, #eeeeef)}\";\r\n\r\nconst pickerInternalMdCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}\";\r\n\r\nconst PickerInternal = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionInputModeChange = createEvent(this, \"ionInputModeChange\", 7);\r\n    this.useInputMode = false;\r\n    this.isInHighlightBounds = (ev) => {\r\n      const { highlightEl } = this;\r\n      if (!highlightEl) {\r\n        return false;\r\n      }\r\n      const bbox = highlightEl.getBoundingClientRect();\r\n      /**\r\n       * Check to see if the user clicked\r\n       * outside the bounds of the highlight.\r\n       */\r\n      const outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\r\n      const outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\r\n      if (outsideX || outsideY) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n    /**\r\n     * If we are no longer focused\r\n     * on a picker column, then we should\r\n     * exit input mode. An exception is made\r\n     * for the input in the picker since having\r\n     * that focused means we are still in input mode.\r\n     */\r\n    this.onFocusOut = (ev) => {\r\n      const { relatedTarget } = ev;\r\n      if (!relatedTarget || (relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== this.inputEl)) {\r\n        this.exitInputMode();\r\n      }\r\n    };\r\n    /**\r\n     * When picker columns receive focus\r\n     * the parent picker needs to determine\r\n     * whether to enter/exit input mode.\r\n     */\r\n    this.onFocusIn = (ev) => {\r\n      const { target } = ev;\r\n      /**\r\n       * Due to browser differences in how/when focus\r\n       * is dispatched on certain elements, we need to\r\n       * make sure that this function only ever runs when\r\n       * focusing a picker column.\r\n       */\r\n      if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {\r\n        return;\r\n      }\r\n      /**\r\n       * If we have actionOnClick\r\n       * then this means the user focused\r\n       * a picker column via mouse or\r\n       * touch (i.e. a PointerEvent). As a result,\r\n       * we should not enter/exit input mode\r\n       * until the click event has fired, which happens\r\n       * after the `focusin` event.\r\n       *\r\n       * Otherwise, the user likely focused\r\n       * the column using their keyboard and\r\n       * we should enter/exit input mode automatically.\r\n       */\r\n      if (!this.actionOnClick) {\r\n        const columnEl = target;\r\n        const allowInput = columnEl.numericInput;\r\n        if (allowInput) {\r\n          this.enterInputMode(columnEl, false);\r\n        }\r\n        else {\r\n          this.exitInputMode();\r\n        }\r\n      }\r\n    };\r\n    /**\r\n     * On click we need to run an actionOnClick\r\n     * function that has been set in onPointerDown\r\n     * so that we enter/exit input mode correctly.\r\n     */\r\n    this.onClick = () => {\r\n      const { actionOnClick } = this;\r\n      if (actionOnClick) {\r\n        actionOnClick();\r\n        this.actionOnClick = undefined;\r\n      }\r\n    };\r\n    /**\r\n     * Clicking a column also focuses the column on\r\n     * certain browsers, so we use onPointerDown\r\n     * to tell the onFocusIn function that users\r\n     * are trying to click the column rather than\r\n     * focus the column using the keyboard. When the\r\n     * user completes the click, the onClick function\r\n     * runs and runs the actionOnClick callback.\r\n     */\r\n    this.onPointerDown = (ev) => {\r\n      const { useInputMode, inputModeColumn, el } = this;\r\n      if (this.isInHighlightBounds(ev)) {\r\n        /**\r\n         * If we were already in\r\n         * input mode, then we should determine\r\n         * if we tapped a particular column and\r\n         * should switch to input mode for\r\n         * that specific column.\r\n         */\r\n        if (useInputMode) {\r\n          /**\r\n           * If we tapped a picker column\r\n           * then we should either switch to input\r\n           * mode for that column or all columns.\r\n           * Otherwise we should exit input mode\r\n           * since we just tapped the highlight and\r\n           * not a column.\r\n           */\r\n          if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {\r\n            /**\r\n             * If user taps 2 different columns\r\n             * then we should just switch to input mode\r\n             * for the new column rather than switching to\r\n             * input mode for all columns.\r\n             */\r\n            if (inputModeColumn && inputModeColumn === ev.target) {\r\n              this.actionOnClick = () => {\r\n                this.enterInputMode();\r\n              };\r\n            }\r\n            else {\r\n              this.actionOnClick = () => {\r\n                this.enterInputMode(ev.target);\r\n              };\r\n            }\r\n          }\r\n          else {\r\n            this.actionOnClick = () => {\r\n              this.exitInputMode();\r\n            };\r\n          }\r\n          /**\r\n           * If we were not already in\r\n           * input mode, then we should\r\n           * enter input mode for all columns.\r\n           */\r\n        }\r\n        else {\r\n          /**\r\n           * If there is only 1 numeric input column\r\n           * then we should skip multi column input.\r\n           */\r\n          const columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');\r\n          const columnEl = columns.length === 1 ? ev.target : undefined;\r\n          this.actionOnClick = () => {\r\n            this.enterInputMode(columnEl);\r\n          };\r\n        }\r\n        return;\r\n      }\r\n      this.actionOnClick = () => {\r\n        this.exitInputMode();\r\n      };\r\n    };\r\n    /**\r\n     * Enters input mode to allow\r\n     * for text entry of numeric values.\r\n     * If on mobile, we focus a hidden input\r\n     * field so that the on screen keyboard\r\n     * is brought up. When tabbing using a\r\n     * keyboard, picker columns receive an outline\r\n     * to indicate they are focused. As a result,\r\n     * we should not focus the hidden input as it\r\n     * would cause the outline to go away, preventing\r\n     * users from having any visual indication of which\r\n     * column is focused.\r\n     */\r\n    this.enterInputMode = (columnEl, focusInput = true) => {\r\n      const { inputEl, el } = this;\r\n      if (!inputEl) {\r\n        return;\r\n      }\r\n      /**\r\n       * Only active input mode if there is at\r\n       * least one column that accepts numeric input.\r\n       */\r\n      const hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');\r\n      if (!hasInputColumn) {\r\n        return;\r\n      }\r\n      /**\r\n       * If columnEl is undefined then\r\n       * it is assumed that all numeric pickers\r\n       * are eligible for text entry.\r\n       * (i.e. hour and minute columns)\r\n       */\r\n      this.useInputMode = true;\r\n      this.inputModeColumn = columnEl;\r\n      /**\r\n       * Users with a keyboard and mouse can\r\n       * activate input mode where the input is\r\n       * focused as well as when it is not focused,\r\n       * so we need to make sure we clean up any\r\n       * old listeners.\r\n       */\r\n      if (focusInput) {\r\n        if (this.destroyKeypressListener) {\r\n          this.destroyKeypressListener();\r\n          this.destroyKeypressListener = undefined;\r\n        }\r\n        inputEl.focus();\r\n      }\r\n      else {\r\n        el.addEventListener('keypress', this.onKeyPress);\r\n        this.destroyKeypressListener = () => {\r\n          el.removeEventListener('keypress', this.onKeyPress);\r\n        };\r\n      }\r\n      this.emitInputModeChange();\r\n    };\r\n    this.exitInputMode = () => {\r\n      const { inputEl, useInputMode } = this;\r\n      if (!useInputMode || !inputEl) {\r\n        return;\r\n      }\r\n      this.useInputMode = false;\r\n      this.inputModeColumn = undefined;\r\n      inputEl.blur();\r\n      inputEl.value = '';\r\n      if (this.destroyKeypressListener) {\r\n        this.destroyKeypressListener();\r\n        this.destroyKeypressListener = undefined;\r\n      }\r\n      this.emitInputModeChange();\r\n    };\r\n    this.onKeyPress = (ev) => {\r\n      const { inputEl } = this;\r\n      if (!inputEl) {\r\n        return;\r\n      }\r\n      const parsedValue = parseInt(ev.key, 10);\r\n      /**\r\n       * Only numbers should be allowed\r\n       */\r\n      if (!Number.isNaN(parsedValue)) {\r\n        inputEl.value += ev.key;\r\n        this.onInputChange();\r\n      }\r\n    };\r\n    this.selectSingleColumn = () => {\r\n      const { inputEl, inputModeColumn, singleColumnSearchTimeout } = this;\r\n      if (!inputEl || !inputModeColumn) {\r\n        return;\r\n      }\r\n      const values = inputModeColumn.items;\r\n      /**\r\n       * If users pause for a bit, the search\r\n       * value should be reset similar to how a\r\n       * <select> behaves. So typing \"34\", waiting,\r\n       * then typing \"5\" should select \"05\".\r\n       */\r\n      if (singleColumnSearchTimeout) {\r\n        clearTimeout(singleColumnSearchTimeout);\r\n      }\r\n      this.singleColumnSearchTimeout = setTimeout(() => {\r\n        inputEl.value = '';\r\n        this.singleColumnSearchTimeout = undefined;\r\n      }, 1000);\r\n      /**\r\n       * For values that are longer than 2 digits long\r\n       * we should shift the value over 1 character\r\n       * to the left. So typing \"456\" would result in \"56\".\r\n       * TODO: If we want to support more than just\r\n       * time entry, we should update this value to be\r\n       * the max length of all of the picker items.\r\n       */\r\n      if (inputEl.value.length >= 3) {\r\n        const startIndex = inputEl.value.length - 2;\r\n        const newString = inputEl.value.substring(startIndex);\r\n        inputEl.value = newString;\r\n        this.selectSingleColumn();\r\n        return;\r\n      }\r\n      /**\r\n       * Checking the value of the input gets priority\r\n       * first. For example, if the value of the input\r\n       * is \"1\" and we entered \"2\", then the complete value\r\n       * is \"12\" and we should select hour 12.\r\n       *\r\n       * Regex removes any leading zeros from values like \"02\".\r\n       */\r\n      const findItemFromCompleteValue = values.find(({ text }) => text.replace(/^0+/, '') === inputEl.value);\r\n      if (findItemFromCompleteValue) {\r\n        inputModeColumn.value = findItemFromCompleteValue.value;\r\n        return;\r\n      }\r\n      /**\r\n       * If we typed \"56\" to get minute 56, then typed \"7\",\r\n       * we should select \"07\" as \"567\" is not a valid minute.\r\n       */\r\n      if (inputEl.value.length === 2) {\r\n        const changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\r\n        inputEl.value = changedCharacter;\r\n        this.selectSingleColumn();\r\n      }\r\n    };\r\n    /**\r\n     * Searches a list of column items for a particular\r\n     * value. This is currently used for numeric values.\r\n     * The zeroBehavior can be set to account for leading\r\n     * or trailing zeros when looking at the item text.\r\n     */\r\n    this.searchColumn = (colEl, value, zeroBehavior = 'start') => {\r\n      const behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\r\n      const item = colEl.items.find(({ text }) => text.replace(behavior, '') === value);\r\n      if (item) {\r\n        colEl.value = item.value;\r\n      }\r\n    };\r\n    this.selectMultiColumn = () => {\r\n      const { inputEl, el } = this;\r\n      if (!inputEl) {\r\n        return;\r\n      }\r\n      const numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter((col) => col.numericInput);\r\n      const firstColumn = numericPickers[0];\r\n      const lastColumn = numericPickers[1];\r\n      let value = inputEl.value;\r\n      let minuteValue;\r\n      switch (value.length) {\r\n        case 1:\r\n          this.searchColumn(firstColumn, value);\r\n          break;\r\n        case 2:\r\n          /**\r\n           * If the first character is `0` or `1` it is\r\n           * possible that users are trying to type `09`\r\n           * or `11` into the hour field, so we should look\r\n           * at that first.\r\n           */\r\n          const firstCharacter = inputEl.value.substring(0, 1);\r\n          value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;\r\n          this.searchColumn(firstColumn, value);\r\n          /**\r\n           * If only checked the first value,\r\n           * we can check the second value\r\n           * for a match in the minutes column\r\n           */\r\n          if (value.length === 1) {\r\n            minuteValue = inputEl.value.substring(inputEl.value.length - 1);\r\n            this.searchColumn(lastColumn, minuteValue, 'end');\r\n          }\r\n          break;\r\n        case 3:\r\n          /**\r\n           * If the first character is `0` or `1` it is\r\n           * possible that users are trying to type `09`\r\n           * or `11` into the hour field, so we should look\r\n           * at that first.\r\n           */\r\n          const firstCharacterAgain = inputEl.value.substring(0, 1);\r\n          value =\r\n            firstCharacterAgain === '0' || firstCharacterAgain === '1'\r\n              ? inputEl.value.substring(0, 2)\r\n              : firstCharacterAgain;\r\n          this.searchColumn(firstColumn, value);\r\n          /**\r\n           * If only checked the first value,\r\n           * we can check the second value\r\n           * for a match in the minutes column\r\n           */\r\n          minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);\r\n          this.searchColumn(lastColumn, minuteValue, 'end');\r\n          break;\r\n        case 4:\r\n          /**\r\n           * If the first character is `0` or `1` it is\r\n           * possible that users are trying to type `09`\r\n           * or `11` into the hour field, so we should look\r\n           * at that first.\r\n           */\r\n          const firstCharacterAgainAgain = inputEl.value.substring(0, 1);\r\n          value =\r\n            firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1'\r\n              ? inputEl.value.substring(0, 2)\r\n              : firstCharacterAgainAgain;\r\n          this.searchColumn(firstColumn, value);\r\n          /**\r\n           * If only checked the first value,\r\n           * we can check the second value\r\n           * for a match in the minutes column\r\n           */\r\n          const minuteValueAgain = value.length === 1\r\n            ? inputEl.value.substring(1, inputEl.value.length)\r\n            : inputEl.value.substring(2, inputEl.value.length);\r\n          this.searchColumn(lastColumn, minuteValueAgain, 'end');\r\n          break;\r\n        default:\r\n          const startIndex = inputEl.value.length - 4;\r\n          const newString = inputEl.value.substring(startIndex);\r\n          inputEl.value = newString;\r\n          this.selectMultiColumn();\r\n          break;\r\n      }\r\n    };\r\n    /**\r\n     * Searches the value of the active column\r\n     * to determine which value users are trying\r\n     * to select\r\n     */\r\n    this.onInputChange = () => {\r\n      const { useInputMode, inputEl, inputModeColumn } = this;\r\n      if (!useInputMode || !inputEl) {\r\n        return;\r\n      }\r\n      if (inputModeColumn) {\r\n        this.selectSingleColumn();\r\n      }\r\n      else {\r\n        this.selectMultiColumn();\r\n      }\r\n    };\r\n    /**\r\n     * Emit ionInputModeChange. Picker columns\r\n     * listen for this event to determine whether\r\n     * or not their column is \"active\" for text input.\r\n     */\r\n    this.emitInputModeChange = () => {\r\n      const { useInputMode, inputModeColumn } = this;\r\n      this.ionInputModeChange.emit({\r\n        useInputMode,\r\n        inputModeColumn,\r\n      });\r\n    };\r\n  }\r\n  componentWillLoad() {\r\n    getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\r\n    getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\r\n  }\r\n  render() {\r\n    return (h(Host, { onPointerDown: (ev) => this.onPointerDown(ev), onClick: () => this.onClick() }, h(\"input\", { \"aria-hidden\": \"true\", tabindex: -1, inputmode: \"numeric\", type: \"number\", ref: (el) => (this.inputEl = el), onInput: () => this.onInputChange(), onBlur: () => this.exitInputMode() }), h(\"div\", { class: \"picker-before\" }), h(\"div\", { class: \"picker-after\" }), h(\"div\", { class: \"picker-highlight\", ref: (el) => (this.highlightEl = el) }), h(\"slot\", null)));\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\nPickerInternal.style = {\r\n  ios: pickerInternalIosCss,\r\n  md: pickerInternalMdCss\r\n};\r\n\r\nexport { PickerInternal as ion_picker_internal };\r\n"],"names":[],"sourceRoot":"webpack:///"}