{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { AwesomeCordovaNativePlugin } from '@awesome-cordova-plugins/core';\nexport interface CameraPreviewDimensions {\n    /** The width of the camera preview, default to window.screen.width */\n    width?: number;\n    /** The height of the camera preview, default to window.screen.height */\n    height?: number;\n}\nexport interface CameraPreviewOptions {\n    /** The left edge in pixels, default 0 */\n    x?: number;\n    /** The top edge in pixels, default 0 */\n    y?: number;\n    /** The width in pixels, default window.screen.width */\n    width?: number;\n    /** The height in pixels, default window.screen.height */\n    height?: number;\n    /** Choose the camera to use 'front' or 'rear', default 'front' */\n    camera?: string;\n    /** Tap to take a photo, default true (picture quality by default : 85) */\n    tapPhoto?: boolean;\n    /** Preview box drag across the screen, default 'false' */\n    previewDrag?: boolean;\n    /** Capture images to a file and return back the file path instead of returning base64 encoded data. */\n    storeToFile: boolean;\n    /** Preview box to the back of the webview (true => back, false => front) , default false */\n    toBack?: boolean;\n    /** Alpha channel of the preview box, float, [0,1], default 1 */\n    alpha?: number;\n    /** Tap to set specific focus point. Note, this assumes the camera is full-screen. default false */\n    tapFocus?: boolean;\n    /** On Android disable automatic rotation of the image and stripping of Exit header. default false */\n    disableExifHeaderStripping?: boolean;\n}\nexport interface CameraPreviewPictureOptions {\n    /** The width in pixels, default 0 */\n    width?: number;\n    /** The height in pixels, default 0 */\n    height?: number;\n    /** The picture quality, 0 - 100, default 85 */\n    quality?: number;\n}\n/**\n * @beta\n * @name Camera Preview\n * @description\n * Showing camera preview in HTML\n *\n * Requires Cordova plugin: `https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview.git`. For more info, please see the [Cordova Camera Preview docs](https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview).\n * @usage\n * ```typescript\n * import { CameraPreview, CameraPreviewPictureOptions, CameraPreviewOptions, CameraPreviewDimensions } from '@awesome-cordova-plugins/camera-preview/ngx';\n *\n * constructor(private cameraPreview: CameraPreview) { }\n *\n * ...\n *\n * // camera options (Size and location). In the following example, the preview uses the rear camera and display the preview in the back of the webview\n * const cameraPreviewOpts: CameraPreviewOptions = {\n *   x: 0,\n *   y: 0,\n *   width: window.screen.width,\n *   height: window.screen.height,\n *   camera: 'rear',\n *   tapPhoto: true,\n *   previewDrag: true,\n *   toBack: true,\n *   alpha: 1\n * }\n *\n * // start camera\n * this.cameraPreview.startCamera(cameraPreviewOpts).then(\n *   (res) => {\n *     console.log(res)\n *   },\n *   (err) => {\n *     console.log(err)\n *   });\n *\n * // Set the handler to run every time we take a picture\n * this.cameraPreview.setOnPictureTakenHandler().subscribe((result) => {\n *   console.log(result);\n *   // do something with the result\n * });\n *\n *\n * // picture options\n * const pictureOpts: CameraPreviewPictureOptions = {\n *   width: 1280,\n *   height: 1280,\n *   quality: 85\n * }\n *\n * // take a picture\n * this.cameraPreview.takePicture(this.pictureOpts).then((imageData) => {\n *   this.picture = 'data:image/jpeg;base64,' + imageData;\n * }, (err) => {\n *   console.log(err);\n *   this.picture = 'assets/img/test.jpg';\n * });\n *\n * // take a snap shot\n * this.cameraPreview.takeSnapshot(this.pictureOpts).then((imageData) => {\n *   this.picture = 'data:image/jpeg;base64,' + imageData;\n * }, (err) => {\n *   console.log(err);\n *   this.picture = 'assets/img/test.jpg';\n * });\n *\n *\n * // Switch camera\n * this.cameraPreview.switchCamera();\n *\n * // set color effect to negative\n * this.cameraPreview.setColorEffect('negative');\n *\n * // Stop the camera preview\n * this.cameraPreview.stopCamera();\n *\n * ```\n * @interfaces\n * CameraPreviewOptions\n * CameraPreviewPictureOptions\n * CameraPreviewDimensions\n */\nexport declare class CameraPreview extends AwesomeCordovaNativePlugin {\n    FOCUS_MODE: {\n        FIXED: string;\n        AUTO: string;\n        CONTINUOUS: string;\n        CONTINUOUS_PICTURE: string;\n        CONTINUOUS_VIDEO: string;\n        EDOF: string;\n        INFINITY: string;\n        MACRO: string;\n    };\n    EXPOSURE_MODE: {\n        LOCK: string;\n        AUTO: string;\n        CONTINUOUS: string;\n        CUSTOM: string;\n    };\n    FLASH_MODE: {\n        OFF: string;\n        ON: string;\n        AUTO: string;\n        RED_EYE: string;\n        TORCH: string;\n    };\n    COLOR_EFFECT: {\n        AQUA: string;\n        BLACKBOARD: string;\n        MONO: string;\n        NEGATIVE: string;\n        NONE: string;\n        POSTERIZE: string;\n        SEPIA: string;\n        SOLARIZE: string;\n        WHITEBOARD: string;\n    };\n    CAMERA_DIRECTION: {\n        BACK: string;\n        FRONT: string;\n    };\n    /**\n     * Starts the camera preview instance.\n     *\n     * @param {CameraPreviewOptions} options\n     * @returns {Promise<any>}\n     */\n    startCamera(options: CameraPreviewOptions): Promise<any>;\n    /**\n     * Starts the camera video instance.\n     *\n     * @param {any} options\n     * @returns {Promise<any>}\n     */\n    startRecordVideo(options: any): Promise<any>;\n    /**\n     * Stops the camera preview instance. (iOS & Android)\n     *\n     * @returns {Promise<any>}\n     */\n    stopCamera(): Promise<any>;\n    /**\n     * Stops the camera video instance. (iOS & Android)\n     *\n     * @returns {Promise<any>}\n     */\n    stopRecordVideo(): Promise<any>;\n    /**\n     * Switch from the rear camera and front camera, if available.\n     *\n     * @returns {Promise<any>}\n     */\n    switchCamera(): Promise<any>;\n    /**\n     * Hide the camera preview box.\n     *\n     * @returns {Promise<any>}\n     */\n    hide(): Promise<any>;\n    /**\n     * Show the camera preview box.\n     *\n     * @returns {Promise<any>}\n     */\n    show(): Promise<any>;\n    /**\n     * Take the picture (base64)\n     *\n     * @param {CameraPreviewPictureOptions} [options] size and quality of the picture to take\n     * @returns {Promise<any>}\n     */\n    takePicture(options?: CameraPreviewPictureOptions): Promise<any>;\n    /**\n     * Take a snapshot of preview window (size specified in startCamera options)\n     *\n     * @param {CameraPreviewPictureOptions} [options] quality of the picture to take\n     * @returns {Promise<any>}\n     */\n    takeSnapshot(options?: CameraPreviewPictureOptions): Promise<any>;\n    /**\n     *\n     * Set camera color effect.\n     *\n     * @static\n     * @param {string} effect name : 'none' (iOS & Android), 'aqua' (Android), 'blackboard' (Android), 'mono' (iOS & Android), 'negative' (iOS & Android), 'posterize' (iOS & Android), 'sepia' (iOS & Android), 'solarize' (Android) or 'whiteboard' (Android)\n     * @returns {Promise<any>}\n     */\n    setColorEffect(effect: string): Promise<any>;\n    /**\n     * Set the zoom (Android)\n     *\n     * @param [zoom] {number} Zoom value\n     * @returns {Promise<any>}\n     */\n    setZoom(zoom?: number): Promise<any>;\n    /**\n     * Get the maximum zoom (Android)\n     *\n     * @returns {Promise<any>}\n     */\n    getMaxZoom(): Promise<any>;\n    /**\n     * Get current zoom (Android)\n     *\n     * @returns {Promise<any>}\n     */\n    getZoom(): Promise<any>;\n    /**\n     * Set the preview Size\n     *\n     * @param {CameraPreviewDimensions} [dimensions]\n     * @returns {Promise<any>}\n     */\n    setPreviewSize(dimensions?: CameraPreviewDimensions): Promise<any>;\n    /**\n     * Get focus mode\n     *\n     * @returns {Promise<any>}\n     */\n    getFocusMode(): Promise<any>;\n    /**\n     * Set the focus mode\n     *\n     * @param {string} [focusMode] 'fixed', 'auto', 'continuous-picture', 'continuous-video' (iOS & Android), 'edof', 'infinity', 'macro' (Android Only)\n     * @returns {Promise<any>}\n     */\n    setFocusMode(focusMode?: string): Promise<any>;\n    /**\n     * Get supported focus modes\n     *\n     * @returns {Promise<any>}\n     */\n    getSupportedFocusModes(): Promise<any>;\n    /**\n     * Get the current flash mode\n     *\n     * @returns {Promise<any>}\n     */\n    getFlashMode(): Promise<any>;\n    /**\n     * Set the flash mode\n     *\n     * @param {string} [flashMode] 'off' (iOS & Android), 'on' (iOS & Android), 'auto' (iOS & Android), 'torch' (Android)\n     * @returns {Promise<any>}\n     */\n    setFlashMode(flashMode?: string): Promise<any>;\n    /**\n     * Get supported flash modes\n     *\n     * @returns {Promise<any>}\n     */\n    getSupportedFlashModes(): Promise<any>;\n    /**\n     * Get supported picture sizes\n     *\n     * @returns {Promise<any>}\n     */\n    getSupportedPictureSizes(): Promise<any>;\n    /**\n     * Get exposure mode\n     *\n     * @returns {Promise<any>}\n     */\n    getExposureMode(): Promise<any>;\n    /**\n     * Get exposure modes\n     *\n     * @returns {Promise<any>}\n     */\n    getExposureModes(): Promise<any>;\n    /**\n     * Set exposure mode\n     *\n     * @param {string} [lock]\n     * @returns {Promise<any>}\n     */\n    setExposureMode(lock?: string): Promise<any>;\n    /**\n     * Get exposure compensation (Android)\n     *\n     * @returns {Promise<any>}\n     */\n    getExposureCompensation(): Promise<any>;\n    /**\n     * Set exposure compensation (Android)\n     *\n     * @param {number} [exposureCompensation]\n     * @returns {Promise<any>}\n     */\n    setExposureCompensation(exposureCompensation?: number): Promise<any>;\n    /**\n     * Get exposure compensation range (Android)\n     *\n     * @returns {Promise<any>}\n     */\n    getExposureCompensationRange(): Promise<any>;\n    /**\n     * Set specific focus point. Note, this assumes the camera is full-screen.\n     *\n     * @param {number} xPoint\n     * @param {number} yPoint\n     * @returns {Promise<any>}\n     */\n    tapToFocus(xPoint: number, yPoint: number): Promise<any>;\n    /**\n     * Add a listener for the back event for the preview\n     *\n     * @returns {Promise<any>} if back button pressed\n     */\n    onBackButton(): Promise<any>;\n    /**\n     * Return in use device camera fov\n     *\n     * @returns {Promise<any>}\n     */\n    getHorizontalFOV(): Promise<any>;\n    /**\n     * Get the characteristics of all available cameras\n     *\n     * @returns {Promise<any>}\n     */\n    getCameraCharacteristics(): Promise<any>;\n}\n"]}